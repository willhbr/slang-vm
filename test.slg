(module Main)
(import Access)
(import Equatable)
(import Sequence)

(defn reduce [coll init fun]
  (let [hd (head coll)]
    (if hd
      (recur (tail coll) (fun init hd) fun)
      coll)))

(defn parse [program index]
  (let [char (get program index)]
    (if (= char "(")
      (IO.puts "Bracket")
      (IO.puts "nonbracket"))))



(let [contents (File.read "test.slg")]
  (reduce contents 0 (fn [acc val] (parse contents val) (+ val 1))))
